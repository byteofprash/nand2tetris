// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y–x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs.
 * Which function to compute is determined by 6 input bits 
 * denoted zx, nx, zy, ny, f, no.
 * The computed function's value is called "out".
 * In addition to computing out, the ALU computes two 
 * 1-bit outputs called zr and ng:
 * if out == 0, zr = 1; otherwise zr = 0;
 * If out < 0, ng = 1; otherwise ng = 0.
 * The 6-bit combinations (zx,nx,zy,ny,f,no) and 
 * their effect are documented in the book. 
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx  == 1) sets x = 0        // 16-bit constant
// if (nx  == 1) sets x = ~x       // bitwise "not"
// if (zy  == 1) sets y = 0        // 16-bit constant
// if (ny  == 1) sets y = ~y       // bitwise "not"
// if (f   == 1) sets out = x + y  // integer 2's-complement addition
// if (f   == 0) sets out = x & y  // bitwise And
// if (no  == 1) sets out = ~out   // bitwise Not
// if (out == 0) sets zr = 1
// if (out < 0)  sets ng = 1

  
CHIP ALU {
IN  
x[16], y[16],  // 16-bit inputs        
zx, // zero the x input?
nx, // negate the x input?
zy, // zero the y input?
ny, // negate the y input?
f,  // compute  out = x + y (if f == 1) or out = x & y (if == 0)
no; // negate the out output?

OUT 
out[16], // 16-bit output
zr, // 1 if (out == 0), 0 otherwise
ng; // 1 if (out < 0),  0 otherwise

PARTS:
Not(in = zx , out = notzx);
Not(in = zy , out = notzy);
And16(a = x , b[0] = notzx ,b[1] = notzx ,b[2] = notzx ,b[3] = notzx ,b[4] = notzx ,b[5] = notzx ,b[6] = notzx ,b[7] = notzx ,b[8] = notzx ,b[9] = notzx ,b[10] = notzx ,b[11] = notzx ,b[12] = notzx ,b[13] = notzx ,b[14] = notzx ,b[15] = notzx , out = x1);

Xor16(a = x1 , b[0] = nx ,b[1] = nx ,b[2] = nx ,b[3] = nx ,b[4] = nx ,b[5] = nx ,b[6] = nx ,b[7] = nx ,b[8] = nx ,b[9] = nx ,b[10] = nx ,b[11] = nx ,b[12] = nx ,b[13] = nx ,b[14] = nx ,b[15] = nx , out  = x2);

And16(a = y , b[0] = notzy ,b[1] = notzy ,b[2] = notzy ,b[3] = notzy ,b[4] = notzy ,b[5] = notzy ,b[6] = notzy ,b[7] = notzy ,b[8] = notzy ,b[9] = notzy ,b[10] = notzy ,b[11] = notzy ,b[12] = notzy ,b[13] = notzy ,b[14] = notzy ,b[15] = notzy , out = y1);

Xor16(a = y1 , b[0] = ny ,b[1] = ny ,b[2] = ny ,b[3] = ny ,b[4] = ny ,b[5] = ny ,b[6] = ny ,b[7] = ny ,b[8] = ny ,b[9] = ny ,b[10] = ny ,b[11] = ny ,b[12] = ny ,b[13] = ny ,b[14] = ny ,b[15] = ny , out = y2);

And16(a = x2 , b = y2 , out = andout);
Add16(a = x2 , b = y2 , out = addout);

Mux16(a = andout , b = addout , sel = f, out = outf );

Xor16(a[0] = no ,a[1] = no ,a[2] = no ,a[3] = no ,a[4] = no ,a[5] = no ,a[6] = no ,a[7] = no ,a[8] = no ,a[9] = no ,a[10] = no ,a[11] = no ,a[12] = no ,a[13] = no ,a[14] = no ,a[15] = no , b = outf , out = out1);

Or16(a = out1, b[0..15] = false , out = out);
Or16Way(in = out1, out = q1);
Not(in = q1 , out = zr);
And16(a = out1 , b[15] = true , b[0..14] = false , out = w1);

Or16Way(in = w1 ,out = ng);

}
